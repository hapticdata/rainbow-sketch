define(["require","exports","module","../internals"],function(t,e,i){var n=t("../internals"),s=function(t){if(void 0===THREE)throw Error("THREE.js has not been loaded");this.scene=t,this.objectDictionary={}},r=function(t,e,i,n,s,r){t.faces[r]=new THREE.Face3(e,i,n,new THREE.Vector3(s.x,s.y,s.z))},o=function(t,e,i){var n=new THREE.Vector3(e.x,e.y,e.z);t.vertices[i]=n};s.createLineGeometry=function(t){var e=new THREE.Geometry;return o(e,t.a,0),o(e,t.b,1),e.computeCentroids(),e.computeVertexNormals(),e},s.createMeshGeometry=function(t,e){e=e||new THREE.Geometry;for(var i=function(t,i){var n=[t.a,t.b,t.c],s=e.vertices.length,a=0,h=3;for(a=0;h>a;a++){var u=n[a];o(e,u,s+a)}var c=t.normal.copy();c.y*=-1,r(e,s,s+1,s+2,c,i)},n=0,s=t.faces.length;s>n;n++)i(t.faces[n],n);return e.computeCentroids(),e.computeVertexNormals(),e},s.createMesh=function(t,e){void 0===e&&(e=new THREE.MeshBasicMaterial);var i=s.createMeshGeometry(t);return new THREE.Mesh(i,e)},s.createParticle=function(t,e){var i=new THREE.Particle(e);return i.position.x=t.x,i.position.y=t.y,i.position.z=t.z,i},s.prototype={addLine:function(t,e,i){void 0===e&&(e=new THREE.LineBasicMaterial);var n=s.createLineGeometry(t),r=new THREE.Line(n,e);return i&&(this.objectDictionary[t]=r),this.scene.add(r),r},addMesh:function(t,e,i){var n;1==arguments.length?(n=t.geometry,e=t.materials,i=t.holdInDictionary):n=t;var s=this.createMesh(n,e);return i&&(this.objectDictionary[n]=s),this.scene.add(s),s},addParticles:function(t,e,i){void 0===e&&(e=new THREE.ParticleBasicMaterial),t=n.tests.isArray(t)?t:[t];for(var s=new THREE.Geometry,r=0,a=t.length;a>r;r++)o(s,t[r]);i&&(this.objectDictionary[t]=s);var h=new THREE.ParticleSystem(s,e);return this.scene.add(h),s},createMeshGeometry:function(t){return s.createMeshGeometry(t)},createMesh:function(t,e){return s.createMesh(t,e)},removeObject:function(t){var e=this.objectDictionary[t];this.scene.removeObject(e),this.objectDictionary[t]&&delete this.objectDictionary[t]}},i.exports=s});