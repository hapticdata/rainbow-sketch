define(["require","exports","module","../internals","../math/mathUtils","./Ray3D","./Vec3D","./mesh/TriangleMesh"],function(t,e,i){var n=t("../internals").extend,r=t("../math/mathUtils"),s=t("./Ray3D"),o=t("./Vec3D"),a=t("./mesh/TriangleMesh"),h=function(){var t,e;0===arguments.length?(t=new o,e=o.Y_AXIS.copy()):1==arguments.length?(t=arguments[0].computeCentroid(),e=arguments[0].computeNormal()):(t=arguments[0],e=arguments[1].getNormalized()),o.apply(this,[t]),this.normal=e};n(h,o),h.Classifier={FRONT:"front",BACK:"back",ON_PLANE:"on plane"},h.XY=new h(new o,o.Z_AXIS),h.XZ=new h(new o,o.Y_AXIS),h.YZ=new h(new o,o.X_AXIS),h.prototype.classifyPoint=function(t,e){var i=this.sub(t).normalize().dot(this.normal);return-e>i?h.Classifier.FRONT:i>e?h.Classifier.BACK:h.Classifier.ON_PLANE},h.prototype.containsPoint=function(t){return this.classifyPoint(t,r.EPS)==h.Classifier.ON_PLANE},h.prototype.getDistanceToPoint=function(t){var e=this.normal.dot(t.sub(this)),i=this.normal.magSquared(),n=t.add(this.normal.scale(e/i));return n.distanceTo(t)},h.prototype.getIntersectionWithRay=function(t){var e,i=this.normal.dot(t.getDirection());return i>r.EPS?(e=this.normal.dot(this.sub(t))/i,t.getPointAtDistance(e)):void 0},h.prototype.getProjectedPoint=function(t){var e,i;return e=0>this.normal.dot(this.sub(t))?this.normal.getInverted():this.normal,i=new s(t,e).getPointAtDistance(this.getDistanceToPoint(t))},h.prototype.intersectRayDistance=function(t){var e=this.normal.dot(this),i=this.normal.dot(t)+e,n=this.normal.dot(t.dir);return r.abs(n)<r.EPS?-1:-(i/n)},h.prototype.toMesh=function(t,e){var i,n,t,e;1==arguments.length?(i=t,n=new a("plane",4,2)):(n=t,i=e)},i.exports=h});