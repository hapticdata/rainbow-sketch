define(["require","exports","module","../math/mathUtils","./Vec2D","./Line2D","./Polygon2D","../internals"],function(t,e,i){var n=t("../internals"),r=t("../math/mathUtils"),s=t("./Vec2D"),o=t("./Line2D"),a=t("./Polygon2D"),h=function(t,e,i,r){if(2==arguments.length){if(!n.tests.hasXY(t))throw Error("Rect received incorrect parameters");this.x=t.x,this.y=t.y,this.width=e.x-this.x,this.height=e.y-this.y}else if(4==arguments.length)this.x=t,this.y=e,this.width=i,this.height=r;else if(1==arguments.length){var s=arguments[0];n.tests.hasXYWidthHeight(s)&&(this.x=s.x,this.y=s.y,this.width=s.width,this.height=s.height)}else if(arguments.length>0)throw Error("Rect received incorrect parameters")};h.fromCenterExtent=function(t,e){return new h(t.sub(e),t.add(e))},h.prototype={containsPoint:function(t){var e=t.x,i=t.y;return this.x>e||e>=this.x+this.width?!1:this.y>i||i>=this.y+this.height?!1:!0},copy:function(){return new h(this.x,this.y,this.width,this.height)},getArea:function(){return this.width*this.height},getAspect:function(){return this.width/this.height},getBottom:function(){return this.y+this.height},getBottomRight:function(){return new s(this.x+this.width,this.y+this.height)},getCentroid:function(){return new s(this.x+.5*this.width,this.y+.5*this.height)},getDimensions:function(){return new s(this.width,this.height)},getEdge:function(t){var e;switch(t){case 0:e=new o(new s(this.x,this.y),new s(this.x+this.width,this.y));break;case 1:e=new o(new s(this.x+this.width,this.y),new s(this.x+this.width,this.y+this.height));break;case 2:e=new o(new s(this.x,this.y+this.height),new s(this.x+this.width,this.y+this.height));break;case 3:e=new o(new s(this.x,this.y),new s(this.x,this.y+this.height));break;default:throw Error("edge ID needs to be 0...3")}return e},getLeft:function(){return this.x},getRight:function(){return this.x+this.width},getTop:function(){return this.y},getTopLeft:function(){return new s(this.x,this.y)},intersectsRay:function(t,e,i){var n=t.getDirection().reciprocal(),r=0>n.x,s=0>n.y,o=this.getTopLeft(),a=this.getBottomRight(),h=r?a:o,u=(h.x-t.x)*n.x;h=r?o:a;var c=(h.x-t.x)*n.x;h=s?a:o;var l=(h.y-t.y)*n.y;h=s?o:a;var d=(h.y-t.y)*n.y;return u>d||l>c?void 0:(l>u&&(u=l),c>d&&(c=d),i>u&&c>e?t.getPointAtDistance(u):void 0)},intersectsRect:function(t){return!(this.x>t.x+t.width||this.x+this.width<t.x||this.y>t.y+t.height||this.y+this.height<t.y)},scale:function(t){var e=this.getCentroid();return this.width*=t,this.height*=t,this.x=e.x-.5*this.width,this.y=e.y-.5*this.height,this},set:function(t,e,i,n){if(-1==arguments.length)this.y=t.y,this.width=t.width,this.height=t.height,this.x=t.x;else{if(4!==arguments.length)throw Error("Rect set() received wrong parameters");this.x=t,this.y=e,this.width=i,this.height=n}},setDimensions:function(t){return 2==arguments.length&&(t={x:arguments[0],y:arguments[1]}),this.width=t.x,this.height=t.y,this},setPosition:function(t){return this.x=t.x,this.y=t.y,this},toPolygon2D:function(){var t=new a;return t.add(new s(this.x,this.y)),t.add(new s(this.x+this.width,this.y)),t.add(new s(this.x+this.width,this.y+this.height)),t.add(new s(this.x,this.y+this.height)),t},toString:function(){return"rect: {x: "+this.x+", y: "+this.y+", width: "+this.width+", height: "+this.height+"}"},union:function(t){var e=r.max(this.x+this.width,t.x+t.width);return this.x=r.min(this.x,t.x),this.width=e-this.x,e=r.max(this.y+this.height,t.y+t.height),this.y=r.min(this.y,t.y),this.height=e-this.y,this}},i.exports=h});