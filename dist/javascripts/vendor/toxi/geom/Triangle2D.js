define(["require","exports","module","./Vec2D","./Line2D","./Rect","./Circle","./Polygon2D","../math/mathUtils"],function(t,e,i){var n=t("./Vec2D"),r=t("./Line2D"),s=t("./Rect"),o=t("./Circle"),a=t("./Polygon2D"),h=t("../math/mathUtils"),u=function(t,e,i){3===arguments.length&&(this.a=t.copy(),this.b=e.copy(),this.c=i.copy())};u.createEquilateralFrom=function(t,e){var i=t.interpolateTo(e,.5),n=t.sub(e),r=n.getPerpendicular();return i.addSelf(r.normalizeTo(n.magnitude()*h.SQRT3/2)),new u(t,e,i)},u.isClockwise=function(t,e,i){var n=(e.x-t.x)*(i.y-t.y)-(i.x-t.x)*(e.y-t.y);return 0>n},u.prototype={adjustTriangleSizeBy:function(t,e,i){1==arguments.length&&(e=t,i=t),this.computeCentroid();var n=new r(this.a.copy(),this.b.copy()).offsetAndGrowBy(t,1e5,this.centroid),s=new r(this.b.copy(),this.c.copy()).offsetAndGrowBy(e,1e5,this.centroid),o=new r(this.c.copy(),this.a.copy()).offsetAndGrowBy(i,1e5,this.centroid);return this.a=n.intersectLine(o).getPos(),this.b=n.intersectLine(s).getPos(),this.c=s.intersectLine(o).getPos(),this.computeCentroid(),this},computeCentroid:function(){return this.centroid=this.a.add(this.b).addSelf(this.c).scaleSelf(1/3),this.centroid},containsPoint:function(t){var e=t.sub(this.a).normalize(),i=t.sub(this.b).normalize(),n=t.sub(this.c).normalize(),r=Math.acos(e.dot(i));return r+=Math.acos(i.dot(n)),r+=Math.acos(n.dot(e)),.01>=h.abs(r-h.TWO_PI)},copy:function(){return new u(this.a.copy(),this.b.copy(),this.c.copy())},flipVertexOrder:function(){var t=this.a;return this.a=this.c,this.c=t,this},getArea:function(){return.5*this.b.sub(this.a).cross(this.c.sub(this.a))},getBounds:function(){return new s(n.min(n.min(this.a,this.b),this.c),n.max(n.max(this.a,this.b),this.c))},getCircumCircle:function(){var t=this.a.bisect(this.b).cross(this.b.bisect(this.c)),e=new n(t.x/t.z,t.y/t.z),i=this.a.distanceTo(this.b),r=this.b.distanceTo(this.c),s=this.c.distanceTo(this.a),a=i*r*s/Math.sqrt((i+r+s)*(-i+r+s)*(i-r+s)*(i+r-s));return new o(e,a)},getCircumference:function(){return this.a.distanceTo(this.b)+this.b.distanceTo(this.c)+this.c.distanceTo(this.a)},getClosestPointTo:function(t){var e=new r(this.a,this.b),i=e.closestPointTo(t),n=e.set(this.b,this.c).closestPointTo(t),s=e.set(this.c,this.a).closestPointTo(t),o=t.sub(i).magSquared(),a=t.sub(n).magSquared(),h=t.sub(s).magSquared(),u=o,c=i;return u>a&&(u=a,c=n),u>h&&(c=s),c},intersectsTriangle:function(t){if(this.containsPoint(t.a)||this.containsPoint(t.b)||this.containsPoint(t.c))return!0;if(t.containsPoint(this.a)||t.containsPoint(this.b)||t.containsPoint(this.c))return!0;for(var e=[new r(this.a,this.b),new r(this.b,this.c),new r(this.c,this.a)],i=[new r(t.a,t.b),new r(t.b,t.c),new r(t.c,t.a)],n=0,s=e.length;s>n;n++)for(var o=e[n],a=0,h=i.length;h>a;a++){var u=i[a],c=o.intersectLine(u).getType();if(c!=r.LineIntersection.Type.NON_INTERSECTING&&c!=r.LineIntersection.Type.PARALLEL)return!0}return!1},isClockwise:function(){return u.isClockwise(this.a,this.b,this.c)},set:function(t,e,i){this.a=t,this.b=e,this.c=i},toPolygon2D:function(){var t=new a;return t.add(this.a.copy()),t.add(this.b.copy()),t.add(this.c.copy()),t},toString:function(){return"Triangle2D: "+this.a+","+this.b+","+this.c}},i.exports=u});