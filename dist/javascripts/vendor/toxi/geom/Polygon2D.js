define(["require","exports","module","./Vec2D","./Line2D","../internals"],function(t,e,i){var n=t("../internals"),r=t("../math/mathUtils"),s=t("./Vec2D"),o=t("./Circle"),a=t("./Line2D"),h=function(){this.vertices=[];var t,e;if(arguments.length>1)for(t=0,e=arguments.length;e>t;t++)this.add(arguments[t].copy());else if(1==arguments.length){var i=arguments[0];if(n.tests.isArray(i))for(t=0,e=i.length;e>t;t++)this.add(i[t].copy())}};h.prototype={constructor:h,add:function(t){0>this.vertices.indexOf(t)&&this.vertices.push(t)},center:function(t){for(var e=this.getCentroid(),i=void 0!==t?t.sub(e):e.invert(),n=0,r=this.vertices.length;r>n;n++)this.vertices[n].addSelf(i);return this},containsPoint:function(t){var e=this.vertices.length,i=0,n=e-1,r=!1,s=t.x,o=t.y;for(i=0;e>i;i++){var a=this.vertices[i],h=this.vertices[n];(o>a.y&&h.y>=o||o>h.y&&a.y>=o)&&s>a.x+(o-a.y)/(h.y-a.y)*(h.x-a.x)&&(r=!r),n=i}return r},containsPolygon:function(t){for(var e=0,i=t.vertices.length;i>e;e++)if(!this.containsPoint(t.vertices[e]))return!1;return!0},copy:function(){return new h(this.vertices)},flipVertexOrder:function(){return this.vertices.reverse(),this},get:function(t){return 0>t&&(t+=this.vertices.length),this.vertices[t]},getApothem:function(){return this.vertices[0].interpolateTo(this.vertices[1],.5).distanceTo(this.getCentroid())},getArea:function(){for(var t=0,e=this.vertices.length,i=0;e>i;i++){var n=this.vertices[i],r=this.vertices[(i+1)%e];t+=n.x*r.y,t-=n.y*r.x}return t*=.5},getBoundingCircle:function(){return o.newBoundingCircle(this.vertices)},getBounds:function(){throw Error("Not yet implemented in Rect")},getCentroid:function(){for(var t=new s,e=this.vertices.length,i=0;e>i;i++){var n=this.vertices[i],r=this.vertices[(i+1)%e],o=n.x*r.y-r.x*n.y;t.x+=(n.x+r.x)*o,t.y+=(n.y+r.y)*o}return t.scale(1/(6*this.getArea()))},getCircumference:function(){for(var t=0,e=0,i=this.vertices.length;i>e;e++)t+=this.vertices[e].distanceTo(this.vertices[(e+1)%i]);return t},getClosestPointTo:function(t){for(var e,i,n,r=Number.MAX_VALUE,s=this.getEdges(),o=0,a=s.length;a>o;o++)i=s[o].closestPointTo(t),n=i.distanceToSquared(t),r>n&&(e=i,r=n);return e},getClosestVertexTo:function(t){for(var e,i,n=Number.MAX_VALUE,r=0,s=this.vertices.length;s>r;r++)i=this.vertices[r].distanceToSquared(t),n>i&&(e=this.vertices[r],n=i);return e},getEdges:function(){for(var t=this.vertices.length,e=[],i=0;t>i;i++)e[i]=new a(this.vertices[i],this.vertices[(i+1)%t]);return e},getNumPoints:function(){return this.getNumVertices()},getNumVertices:function(){return this.vertices.length},getRandomPoint:function(){for(var t,e=this.getEdges(),i=e.length,n=e[r.random(i)];void 0===t||t.equals(n);)t=e[r.random(i)];var s=n.a.interpolateTo(n.b,Math.random());return s.interpolateToSelf(t.a.interpolateTo(t.b,Math.random()),Math.random())},increaseVertexCount:function(t){for(var e,i,n=this.vertices.length,r=0,s=0,o=0;t>n;){for(r=0,s=0,o=0;n>o;o++)e=this.vertices[o].distanceToSquared(this.vertices[(o+1)%n]),e>s&&(r=o,s=e);i=this.vertices[r].add(this.vertices[(r+1)%n]).scaleSelf(.5),this.vertices.splice(r+1,0,i),n++}return this},intersectsPolygon:function(t){for(var e,i,n,r=a.LineIntersection.Type,s=this.getEdges(),o=t.getEdges(),h=0,u=s.length,c=0,l=o.length;u>h;h++)for(e=s[h],c=0;l>c;c++)if(i=o[c],n=e.intersectLine(i).getType(),n===r.INTERSECTING||n==r.COINCIDENT)return!0;return!1},isClockwise:function(){var t=function(t,e,i){var n=(e.x-t.x)*(i.y-t.y)-(i.x-t.x)*(e.y-t.y);return 0>n};return this.vertices.length>2?t(this.vertices[0],this.vertices[1],this.vertices[2]):!1},intersectsPoly:function(t){if(this.containsPolygon(t))return!0;for(var e=this.getEdges(),i=t.getEdges(),n=0,r=e.length;r>n;n++)for(var s=0,o=i.length,h=e[n];o>s;s++)if(h.intersectLine(i[s]).getType()==a.LineIntersection.Type.INTERSECTING)return!0;return!1},removeDuplicates:function(t){for(var e,i,n,r=t?"equalsWithTolerance":"equals",s=0,o=this.vertices.length;o>s;s++)e=this.vertices[s],e[r](i,t)?(this.vertices.splice(s,1),s--,o--):i=e;return o=this.vertices.length,o>0&&(n=this.vertices[o-1],n[r](this.vertices[0],t)&&this.vertices.splice(o-1,1)),this},rotate:function(t){for(var e=0,i=this.vertices.length;i>e;e++)this.vertices[e].rotate(t)},scale:function(){var t,e;if(1==arguments.length){var i=arguments[0];n.tests.hasXY(i)?(t=i.x,e=i.y):(t=i,e=i)}else{if(2!=arguments.length)throw"Invalid argument(s) passed.";t=arguments[0],e=arguments[1]}for(var r=0,s=this.vertices.length;s>r;r++)this.vertices[r].scaleSelf(t,e);return this},translate:function(){var t,e;if(1==arguments.length&&n.tests.hasXY(arguments[0]))t=arguments[0].x,e=arguments[0].y;else{if(2!=arguments.length)throw"Invalid argument(s) passed.";t=arguments[0],e=arguments[1]}for(var i=0,r=this.vertices.length;r>i;i++)this.vertices[i].addSelf(t,e);return this},smooth:function(t,e){for(var i=this.getCentroid(),n=this.vertices.length,r=[],s=0,o=n-1,a=1;n>s;s++){var h=this.vertices[s],u=this.vertices[o].sub(h).addSelf(this.vertices[a].sub(h)).addSelf(h.sub(i).scaleSelf(e));r.push(h.add(u.scaleSelf(t))),o++,o==n&&(o=0),a++,a==n&&(a=0)}return this.vertices=r,this},toString:function(){for(var t="",e=0;this.vertices.length>e;e++)t+=this.vertices[e],this.vertices.length-1>e&&(t+=", ");return t}},h.fromBaseEdge=function(t,e,i){for(var n,s=-(r.PI-r.PI*(i-2)/i),o=e.sub(t),a=e,u=new h(t,e),c=0;i-1>c;c++)n=a.add(o.getRotated(s*c)),u.add(n),a=n;return u},h.fromEdgeLength=function(t,e){return new o(h.getRadiusForEdgeLength(t,e)).toPolygon2D(e)},h.getRadiusForEdgeLength=function(t,e){return t/(2*r.sin(r.PI/e))},i.exports=h});